name: Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**"

env:
  NODE_VERSION: "22"
  JAVA_VERSION: "17"

jobs:
  # Unit tests - runs independently and uploads coverage
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      # Code checkout (shallow for performance)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Node.js setup with enhanced caching
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      # Install dependencies
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      # Run unit tests with coverage
      - name: Run unit tests with coverage
        run: npm run test:unit
        env:
          CI: true

      # Upload unit test coverage artifacts
      - name: Upload unit coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage
          path: coverage/unit/
          retention-days: 1

  # Cross-platform integration tests - runs in parallel with unit tests
  integration-tests:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
      # Code checkout (shallow for performance)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Node.js setup with enhanced caching
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      # Install dependencies
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      # System dependencies for Electron (Ubuntu only, optimized)
      - name: Install Electron dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            libnss3-dev \
            libatk-bridge2.0-dev \
            libxkbcommon0 \
            libxcomposite1 \
            libxdamage1 \
            libxrandr2 \
            libgbm1 \
            libxss1 \
            libasound2-dev \
            libgtk-3-0 \
            xvfb

      # Virtual display setup (Linux only, optimized)
      - name: Setup virtual display
        if: matrix.os == 'ubuntu-latest'
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 2

      # Run integration tests with coverage
      - name: Run integration tests
        run: npm run test:integration
        env:
          CI: true
          DISPLAY: ${{ matrix.os == 'ubuntu-latest' && ':99' || '' }}

      # Upload integration coverage artifacts (Ubuntu only to avoid duplicates)
      - name: Upload integration coverage artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage
          path: coverage/integration/
          retention-days: 1

  # Analysis and reporting - downloads coverage artifacts and runs analysis
  analysis:
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      # Code checkout (full history for SonarCloud)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Node.js setup with enhanced caching
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      # Install dependencies (minimal, no rebuild needed)
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --ignore-scripts

      # Download coverage artifacts from previous jobs
      - name: Download unit coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: unit-coverage
          path: coverage/unit/

      - name: Download integration coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: integration-coverage
          path: coverage/integration/

      # Merge coverage reports without re-running tests
      - name: Merge coverage reports
        run: |
          npm run coverage:merge
          npm run coverage:total

      # Setup Java for SonarCloud (parallel with coverage)
      - name: Setup Java for SonarCloud
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      # Code coverage upload (only on main branch)
      - name: Upload coverage to Codecov
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: peteb4ker/romper
          files: ./coverage/coverage-final.json
          disable_search: true

      # SonarCloud analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORGANIZATION: peteb4ker
          SONAR_HOST_URL: https://sonarcloud.io
